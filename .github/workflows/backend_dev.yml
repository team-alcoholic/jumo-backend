name: Build and Deploy Spring Docker Image

on:
  push:
    branches:
      - 'develop'

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Set application properties from GitHub Secrets
      run: |
        cat <<EOF > config.json
${{ secrets.APP_CONFIG_JSON }}
EOF
        jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' config.json > src/main/resources/application.properties

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jumo_back_dev .

    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/jumo_back_dev

  deploy-to-az1:
    needs: build-docker-image
    runs-on: [self-hosted]
    steps:
    - name: Clean up Docker system before pulling
      run: |
        sudo docker stop $(sudo docker ps -aq) || true
        sudo docker container prune -f || true
        sudo docker image prune -a -f || true
        sudo docker volume prune -f || true
        sudo docker network prune -f || true
        sudo docker system prune -a -f || true

    - name: docker pull
      run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jumo_back_dev

    - name: docker run new container
      run: sudo docker run --rm -it -d -p 80:8080 --name jumo_back_dev ${{ secrets.DOCKERHUB_USERNAME }}/jumo_back_dev

    - name: Clean up unused Docker images after deployment
      run: |
        sudo docker image prune -a -f || true
